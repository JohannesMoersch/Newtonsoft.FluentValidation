// NOTE: GENERATED FILE //
using Functional;
using System;
using System.Collections.Generic;
using Valigator.Core;
using Valigator.Core.DataContainers.Factories;
using Valigator.Core.DataSources;
using Valigator.Core.StateValidators;
using Valigator.Core.ValueValidators;

namespace Valigator
{
	public static class OptionalNullableCollectionStateValidatorExtensions
	{
		public static DataSourceInverted<OptionalCollectionNullableDataContainerFactory<OptionalNullableCollectionStateValidator<TValue>, TValue, TValue>, Optional<Option<TValue>[]>, Option<TValue>[], TValueValidator> Not<TValue, TValueValidator>(this OptionalNullableCollectionStateValidator<TValue> source, Func<OptionalNullableCollectionStateValidator<TValue>, DataSourceStandard<OptionalCollectionNullableDataContainerFactory<OptionalNullableCollectionStateValidator<TValue>, TValue, TValue>, Optional<Option<TValue>[]>, Option<TValue>[], TValueValidator>> validatorFactory)
			where TValueValidator : struct, IValueValidator<Option<TValue>[]>
			=> validatorFactory.Invoke(source).InvertOne();

		public static DataSourceInverted<OptionalCollectionNullableDataContainerFactory<OptionalNullableCollectionStateValidator<TValue>, TSource, TValue>, Optional<Option<TValue>[]>, Option<TValue>[], TValueValidator> Not<TSource, TValue, TValueValidator>(this DataSource<OptionalCollectionNullableDataContainerFactory<OptionalNullableCollectionStateValidator<TValue>, TSource, TValue>, Optional<Option<TValue>[]>, Option<TValue>[]> source, Func<DataSource<OptionalCollectionNullableDataContainerFactory<OptionalNullableCollectionStateValidator<TValue>, TSource, TValue>, Optional<Option<TValue>[]>, Option<TValue>[]>, DataSourceStandard<OptionalCollectionNullableDataContainerFactory<OptionalNullableCollectionStateValidator<TValue>, TSource, TValue>, Optional<Option<TValue>[]>, Option<TValue>[], TValueValidator>> validatorFactory)
			where TValueValidator : struct, IValueValidator<Option<TValue>[]>
			=> validatorFactory.Invoke(source).InvertOne();

		public static DataSourceStandard<OptionalCollectionNullableDataContainerFactory<OptionalNullableCollectionStateValidator<TValue>, TValue, TValue>, Optional<Option<TValue>[]>, Option<TValue>[], CustomValidator<Option<TValue>[]>> Assert<TValue>(this OptionalNullableCollectionStateValidator<TValue> source, string description, Func<Option<TValue>[], bool> validator)
			=> source.Add(new CustomValidator<Option<TValue>[]>(description, validator));

		public static DataSourceStandard<OptionalCollectionNullableDataContainerFactory<OptionalNullableCollectionStateValidator<TValue>, TSource, TValue>, Optional<Option<TValue>[]>, Option<TValue>[], CustomValidator<Option<TValue>[]>> Assert<TSource, TValue>(this DataSource<OptionalCollectionNullableDataContainerFactory<OptionalNullableCollectionStateValidator<TValue>, TSource, TValue>, Optional<Option<TValue>[]>, Option<TValue>[]> source, string description, Func<Option<TValue>[], bool> validator)
			=> source.Add(new CustomValidator<Option<TValue>[]>(description, validator));

		public static DataSourceStandard<OptionalCollectionNullableDataContainerFactory<OptionalNullableCollectionStateValidator<TValue>, TValue, TValue>, Optional<Option<TValue>[]>, Option<TValue>[], UniqueValidator<Option<TValue>>> Unique<TValue>(this OptionalNullableCollectionStateValidator<TValue> source)
			=> source.Add(new UniqueValidator<Option<TValue>>());

		public static DataSourceStandard<OptionalCollectionNullableDataContainerFactory<OptionalNullableCollectionStateValidator<TValue>, TSource, TValue>, Optional<Option<TValue>[]>, Option<TValue>[], UniqueValidator<Option<TValue>>> Unique<TSource, TValue>(this DataSource<OptionalCollectionNullableDataContainerFactory<OptionalNullableCollectionStateValidator<TValue>, TSource, TValue>, Optional<Option<TValue>[]>, Option<TValue>[]> source)
			=> source.Add(new UniqueValidator<Option<TValue>>());

		public static DataSourceStandard<OptionalCollectionNullableDataContainerFactory<OptionalNullableCollectionStateValidator<TValue>, TValue, TValue>, Optional<Option<TValue>[]>, Option<TValue>[], ItemCountValidator<Option<TValue>>> ItemCount<TValue>(this OptionalNullableCollectionStateValidator<TValue> source, int? minimumItems = null, int? maximumItems = null)
			=> source.Add(new ItemCountValidator<Option<TValue>>(minimumItems, maximumItems));

		public static DataSourceStandard<OptionalCollectionNullableDataContainerFactory<OptionalNullableCollectionStateValidator<TValue>, TSource, TValue>, Optional<Option<TValue>[]>, Option<TValue>[], ItemCountValidator<Option<TValue>>> ItemCount<TSource, TValue>(this DataSource<OptionalCollectionNullableDataContainerFactory<OptionalNullableCollectionStateValidator<TValue>, TSource, TValue>, Optional<Option<TValue>[]>, Option<TValue>[]> source, int? minimumItems = null, int? maximumItems = null)
			=> source.Add(new ItemCountValidator<Option<TValue>>(minimumItems, maximumItems));

		public static DataSourceStandardStandard<OptionalCollectionNullableDataContainerFactory<OptionalNullableCollectionStateValidator<TValue>, TSource, TValue>, Optional<Option<TValue>[]>, Option<TValue>[], UniqueValidator<Option<TValue>>, CustomValidator<Option<TValue>[]>> Assert<TSource, TValue>(this DataSourceStandard<OptionalCollectionNullableDataContainerFactory<OptionalNullableCollectionStateValidator<TValue>, TSource, TValue>, Optional<Option<TValue>[]>, Option<TValue>[], UniqueValidator<Option<TValue>>> source, string description, Func<Option<TValue>[], bool> validator)
			=> source.Add(new CustomValidator<Option<TValue>[]>(description, validator));

		public static DataSourceInvertedStandard<OptionalCollectionNullableDataContainerFactory<OptionalNullableCollectionStateValidator<TValue>, TSource, TValue>, Optional<Option<TValue>[]>, Option<TValue>[], UniqueValidator<Option<TValue>>, CustomValidator<Option<TValue>[]>> Assert<TSource, TValue>(this DataSourceInverted<OptionalCollectionNullableDataContainerFactory<OptionalNullableCollectionStateValidator<TValue>, TSource, TValue>, Optional<Option<TValue>[]>, Option<TValue>[], UniqueValidator<Option<TValue>>> source, string description, Func<Option<TValue>[], bool> validator)
			=> source.Add(new CustomValidator<Option<TValue>[]>(description, validator));

		public static DataSourceStandardStandard<OptionalCollectionNullableDataContainerFactory<OptionalNullableCollectionStateValidator<TValue>, TSource, TValue>, Optional<Option<TValue>[]>, Option<TValue>[], UniqueValidator<Option<TValue>>, ItemCountValidator<Option<TValue>>> ItemCount<TSource, TValue>(this DataSourceStandard<OptionalCollectionNullableDataContainerFactory<OptionalNullableCollectionStateValidator<TValue>, TSource, TValue>, Optional<Option<TValue>[]>, Option<TValue>[], UniqueValidator<Option<TValue>>> source, int? minimumItems = null, int? maximumItems = null)
			=> source.Add(new ItemCountValidator<Option<TValue>>(minimumItems, maximumItems));

		public static DataSourceInvertedStandard<OptionalCollectionNullableDataContainerFactory<OptionalNullableCollectionStateValidator<TValue>, TSource, TValue>, Optional<Option<TValue>[]>, Option<TValue>[], UniqueValidator<Option<TValue>>, ItemCountValidator<Option<TValue>>> ItemCount<TSource, TValue>(this DataSourceInverted<OptionalCollectionNullableDataContainerFactory<OptionalNullableCollectionStateValidator<TValue>, TSource, TValue>, Optional<Option<TValue>[]>, Option<TValue>[], UniqueValidator<Option<TValue>>> source, int? minimumItems = null, int? maximumItems = null)
			=> source.Add(new ItemCountValidator<Option<TValue>>(minimumItems, maximumItems));

		public static DataSourceStandardInverted<OptionalCollectionNullableDataContainerFactory<OptionalNullableCollectionStateValidator<TValue>, TSource, TValue>, Optional<Option<TValue>[]>, Option<TValue>[], UniqueValidator<Option<TValue>>, TValueValidator> Not<TSource, TValue, TValueValidator>(this DataSourceStandard<OptionalCollectionNullableDataContainerFactory<OptionalNullableCollectionStateValidator<TValue>, TSource, TValue>, Optional<Option<TValue>[]>, Option<TValue>[], UniqueValidator<Option<TValue>>> source, Func<DataSourceStandard<OptionalCollectionNullableDataContainerFactory<OptionalNullableCollectionStateValidator<TValue>, TSource, TValue>, Optional<Option<TValue>[]>, Option<TValue>[], UniqueValidator<Option<TValue>>>, DataSourceStandardStandard<OptionalCollectionNullableDataContainerFactory<OptionalNullableCollectionStateValidator<TValue>, TSource, TValue>, Optional<Option<TValue>[]>, Option<TValue>[], UniqueValidator<Option<TValue>>, TValueValidator>> validatorFactory)
			where TValueValidator : struct, IValueValidator<Option<TValue>[]>
			=> validatorFactory.Invoke(source).InvertTwo();

		public static DataSourceInvertedInverted<OptionalCollectionNullableDataContainerFactory<OptionalNullableCollectionStateValidator<TValue>, TSource, TValue>, Optional<Option<TValue>[]>, Option<TValue>[], UniqueValidator<Option<TValue>>, TValueValidator> Not<TSource, TValue, TValueValidator>(this DataSourceInverted<OptionalCollectionNullableDataContainerFactory<OptionalNullableCollectionStateValidator<TValue>, TSource, TValue>, Optional<Option<TValue>[]>, Option<TValue>[], UniqueValidator<Option<TValue>>> source, Func<DataSourceInverted<OptionalCollectionNullableDataContainerFactory<OptionalNullableCollectionStateValidator<TValue>, TSource, TValue>, Optional<Option<TValue>[]>, Option<TValue>[], UniqueValidator<Option<TValue>>>, DataSourceInvertedStandard<OptionalCollectionNullableDataContainerFactory<OptionalNullableCollectionStateValidator<TValue>, TSource, TValue>, Optional<Option<TValue>[]>, Option<TValue>[], UniqueValidator<Option<TValue>>, TValueValidator>> validatorFactory)
			where TValueValidator : struct, IValueValidator<Option<TValue>[]>
			=> validatorFactory.Invoke(source).InvertTwo();

		public static DataSourceStandardStandardStandard<OptionalCollectionNullableDataContainerFactory<OptionalNullableCollectionStateValidator<TValue>, TSource, TValue>, Optional<Option<TValue>[]>, Option<TValue>[], UniqueValidator<Option<TValue>>, ItemCountValidator<Option<TValue>>, CustomValidator<Option<TValue>[]>> Assert<TSource, TValue>(this DataSourceStandardStandard<OptionalCollectionNullableDataContainerFactory<OptionalNullableCollectionStateValidator<TValue>, TSource, TValue>, Optional<Option<TValue>[]>, Option<TValue>[], UniqueValidator<Option<TValue>>, ItemCountValidator<Option<TValue>>> source, string description, Func<Option<TValue>[], bool> validator)
			=> source.Add(new CustomValidator<Option<TValue>[]>(description, validator));

		public static DataSourceInvertedStandardStandard<OptionalCollectionNullableDataContainerFactory<OptionalNullableCollectionStateValidator<TValue>, TSource, TValue>, Optional<Option<TValue>[]>, Option<TValue>[], UniqueValidator<Option<TValue>>, ItemCountValidator<Option<TValue>>, CustomValidator<Option<TValue>[]>> Assert<TSource, TValue>(this DataSourceInvertedStandard<OptionalCollectionNullableDataContainerFactory<OptionalNullableCollectionStateValidator<TValue>, TSource, TValue>, Optional<Option<TValue>[]>, Option<TValue>[], UniqueValidator<Option<TValue>>, ItemCountValidator<Option<TValue>>> source, string description, Func<Option<TValue>[], bool> validator)
			=> source.Add(new CustomValidator<Option<TValue>[]>(description, validator));

		public static DataSourceStandardInvertedStandard<OptionalCollectionNullableDataContainerFactory<OptionalNullableCollectionStateValidator<TValue>, TSource, TValue>, Optional<Option<TValue>[]>, Option<TValue>[], UniqueValidator<Option<TValue>>, ItemCountValidator<Option<TValue>>, CustomValidator<Option<TValue>[]>> Assert<TSource, TValue>(this DataSourceStandardInverted<OptionalCollectionNullableDataContainerFactory<OptionalNullableCollectionStateValidator<TValue>, TSource, TValue>, Optional<Option<TValue>[]>, Option<TValue>[], UniqueValidator<Option<TValue>>, ItemCountValidator<Option<TValue>>> source, string description, Func<Option<TValue>[], bool> validator)
			=> source.Add(new CustomValidator<Option<TValue>[]>(description, validator));

		public static DataSourceInvertedInvertedStandard<OptionalCollectionNullableDataContainerFactory<OptionalNullableCollectionStateValidator<TValue>, TSource, TValue>, Optional<Option<TValue>[]>, Option<TValue>[], UniqueValidator<Option<TValue>>, ItemCountValidator<Option<TValue>>, CustomValidator<Option<TValue>[]>> Assert<TSource, TValue>(this DataSourceInvertedInverted<OptionalCollectionNullableDataContainerFactory<OptionalNullableCollectionStateValidator<TValue>, TSource, TValue>, Optional<Option<TValue>[]>, Option<TValue>[], UniqueValidator<Option<TValue>>, ItemCountValidator<Option<TValue>>> source, string description, Func<Option<TValue>[], bool> validator)
			=> source.Add(new CustomValidator<Option<TValue>[]>(description, validator));

		public static DataSourceStandardStandardInverted<OptionalCollectionNullableDataContainerFactory<OptionalNullableCollectionStateValidator<TValue>, TSource, TValue>, Optional<Option<TValue>[]>, Option<TValue>[], UniqueValidator<Option<TValue>>, ItemCountValidator<Option<TValue>>, TValueValidator> Not<TSource, TValue, TValueValidator>(this DataSourceStandardStandard<OptionalCollectionNullableDataContainerFactory<OptionalNullableCollectionStateValidator<TValue>, TSource, TValue>, Optional<Option<TValue>[]>, Option<TValue>[], UniqueValidator<Option<TValue>>, ItemCountValidator<Option<TValue>>> source, Func<DataSourceStandardStandard<OptionalCollectionNullableDataContainerFactory<OptionalNullableCollectionStateValidator<TValue>, TSource, TValue>, Optional<Option<TValue>[]>, Option<TValue>[], UniqueValidator<Option<TValue>>, ItemCountValidator<Option<TValue>>>, DataSourceStandardStandardStandard<OptionalCollectionNullableDataContainerFactory<OptionalNullableCollectionStateValidator<TValue>, TSource, TValue>, Optional<Option<TValue>[]>, Option<TValue>[], UniqueValidator<Option<TValue>>, ItemCountValidator<Option<TValue>>, TValueValidator>> validatorFactory)
			where TValueValidator : struct, IValueValidator<Option<TValue>[]>
			=> validatorFactory.Invoke(source).InvertThree();

		public static DataSourceInvertedStandardInverted<OptionalCollectionNullableDataContainerFactory<OptionalNullableCollectionStateValidator<TValue>, TSource, TValue>, Optional<Option<TValue>[]>, Option<TValue>[], UniqueValidator<Option<TValue>>, ItemCountValidator<Option<TValue>>, TValueValidator> Not<TSource, TValue, TValueValidator>(this DataSourceInvertedStandard<OptionalCollectionNullableDataContainerFactory<OptionalNullableCollectionStateValidator<TValue>, TSource, TValue>, Optional<Option<TValue>[]>, Option<TValue>[], UniqueValidator<Option<TValue>>, ItemCountValidator<Option<TValue>>> source, Func<DataSourceInvertedStandard<OptionalCollectionNullableDataContainerFactory<OptionalNullableCollectionStateValidator<TValue>, TSource, TValue>, Optional<Option<TValue>[]>, Option<TValue>[], UniqueValidator<Option<TValue>>, ItemCountValidator<Option<TValue>>>, DataSourceInvertedStandardStandard<OptionalCollectionNullableDataContainerFactory<OptionalNullableCollectionStateValidator<TValue>, TSource, TValue>, Optional<Option<TValue>[]>, Option<TValue>[], UniqueValidator<Option<TValue>>, ItemCountValidator<Option<TValue>>, TValueValidator>> validatorFactory)
			where TValueValidator : struct, IValueValidator<Option<TValue>[]>
			=> validatorFactory.Invoke(source).InvertThree();

		public static DataSourceStandardInvertedInverted<OptionalCollectionNullableDataContainerFactory<OptionalNullableCollectionStateValidator<TValue>, TSource, TValue>, Optional<Option<TValue>[]>, Option<TValue>[], UniqueValidator<Option<TValue>>, ItemCountValidator<Option<TValue>>, TValueValidator> Not<TSource, TValue, TValueValidator>(this DataSourceStandardInverted<OptionalCollectionNullableDataContainerFactory<OptionalNullableCollectionStateValidator<TValue>, TSource, TValue>, Optional<Option<TValue>[]>, Option<TValue>[], UniqueValidator<Option<TValue>>, ItemCountValidator<Option<TValue>>> source, Func<DataSourceStandardInverted<OptionalCollectionNullableDataContainerFactory<OptionalNullableCollectionStateValidator<TValue>, TSource, TValue>, Optional<Option<TValue>[]>, Option<TValue>[], UniqueValidator<Option<TValue>>, ItemCountValidator<Option<TValue>>>, DataSourceStandardInvertedStandard<OptionalCollectionNullableDataContainerFactory<OptionalNullableCollectionStateValidator<TValue>, TSource, TValue>, Optional<Option<TValue>[]>, Option<TValue>[], UniqueValidator<Option<TValue>>, ItemCountValidator<Option<TValue>>, TValueValidator>> validatorFactory)
			where TValueValidator : struct, IValueValidator<Option<TValue>[]>
			=> validatorFactory.Invoke(source).InvertThree();

		public static DataSourceInvertedInvertedInverted<OptionalCollectionNullableDataContainerFactory<OptionalNullableCollectionStateValidator<TValue>, TSource, TValue>, Optional<Option<TValue>[]>, Option<TValue>[], UniqueValidator<Option<TValue>>, ItemCountValidator<Option<TValue>>, TValueValidator> Not<TSource, TValue, TValueValidator>(this DataSourceInvertedInverted<OptionalCollectionNullableDataContainerFactory<OptionalNullableCollectionStateValidator<TValue>, TSource, TValue>, Optional<Option<TValue>[]>, Option<TValue>[], UniqueValidator<Option<TValue>>, ItemCountValidator<Option<TValue>>> source, Func<DataSourceInvertedInverted<OptionalCollectionNullableDataContainerFactory<OptionalNullableCollectionStateValidator<TValue>, TSource, TValue>, Optional<Option<TValue>[]>, Option<TValue>[], UniqueValidator<Option<TValue>>, ItemCountValidator<Option<TValue>>>, DataSourceInvertedInvertedStandard<OptionalCollectionNullableDataContainerFactory<OptionalNullableCollectionStateValidator<TValue>, TSource, TValue>, Optional<Option<TValue>[]>, Option<TValue>[], UniqueValidator<Option<TValue>>, ItemCountValidator<Option<TValue>>, TValueValidator>> validatorFactory)
			where TValueValidator : struct, IValueValidator<Option<TValue>[]>
			=> validatorFactory.Invoke(source).InvertThree();

		public static DataSourceStandardStandard<OptionalCollectionNullableDataContainerFactory<OptionalNullableCollectionStateValidator<TValue>, TSource, TValue>, Optional<Option<TValue>[]>, Option<TValue>[], ItemCountValidator<Option<TValue>>, CustomValidator<Option<TValue>[]>> Assert<TSource, TValue>(this DataSourceStandard<OptionalCollectionNullableDataContainerFactory<OptionalNullableCollectionStateValidator<TValue>, TSource, TValue>, Optional<Option<TValue>[]>, Option<TValue>[], ItemCountValidator<Option<TValue>>> source, string description, Func<Option<TValue>[], bool> validator)
			=> source.Add(new CustomValidator<Option<TValue>[]>(description, validator));

		public static DataSourceInvertedStandard<OptionalCollectionNullableDataContainerFactory<OptionalNullableCollectionStateValidator<TValue>, TSource, TValue>, Optional<Option<TValue>[]>, Option<TValue>[], ItemCountValidator<Option<TValue>>, CustomValidator<Option<TValue>[]>> Assert<TSource, TValue>(this DataSourceInverted<OptionalCollectionNullableDataContainerFactory<OptionalNullableCollectionStateValidator<TValue>, TSource, TValue>, Optional<Option<TValue>[]>, Option<TValue>[], ItemCountValidator<Option<TValue>>> source, string description, Func<Option<TValue>[], bool> validator)
			=> source.Add(new CustomValidator<Option<TValue>[]>(description, validator));

		public static DataSourceStandardStandard<OptionalCollectionNullableDataContainerFactory<OptionalNullableCollectionStateValidator<TValue>, TSource, TValue>, Optional<Option<TValue>[]>, Option<TValue>[], ItemCountValidator<Option<TValue>>, UniqueValidator<Option<TValue>>> Unique<TSource, TValue>(this DataSourceStandard<OptionalCollectionNullableDataContainerFactory<OptionalNullableCollectionStateValidator<TValue>, TSource, TValue>, Optional<Option<TValue>[]>, Option<TValue>[], ItemCountValidator<Option<TValue>>> source)
			=> source.Add(new UniqueValidator<Option<TValue>>());

		public static DataSourceInvertedStandard<OptionalCollectionNullableDataContainerFactory<OptionalNullableCollectionStateValidator<TValue>, TSource, TValue>, Optional<Option<TValue>[]>, Option<TValue>[], ItemCountValidator<Option<TValue>>, UniqueValidator<Option<TValue>>> Unique<TSource, TValue>(this DataSourceInverted<OptionalCollectionNullableDataContainerFactory<OptionalNullableCollectionStateValidator<TValue>, TSource, TValue>, Optional<Option<TValue>[]>, Option<TValue>[], ItemCountValidator<Option<TValue>>> source)
			=> source.Add(new UniqueValidator<Option<TValue>>());

		public static DataSourceStandardInverted<OptionalCollectionNullableDataContainerFactory<OptionalNullableCollectionStateValidator<TValue>, TSource, TValue>, Optional<Option<TValue>[]>, Option<TValue>[], ItemCountValidator<Option<TValue>>, TValueValidator> Not<TSource, TValue, TValueValidator>(this DataSourceStandard<OptionalCollectionNullableDataContainerFactory<OptionalNullableCollectionStateValidator<TValue>, TSource, TValue>, Optional<Option<TValue>[]>, Option<TValue>[], ItemCountValidator<Option<TValue>>> source, Func<DataSourceStandard<OptionalCollectionNullableDataContainerFactory<OptionalNullableCollectionStateValidator<TValue>, TSource, TValue>, Optional<Option<TValue>[]>, Option<TValue>[], ItemCountValidator<Option<TValue>>>, DataSourceStandardStandard<OptionalCollectionNullableDataContainerFactory<OptionalNullableCollectionStateValidator<TValue>, TSource, TValue>, Optional<Option<TValue>[]>, Option<TValue>[], ItemCountValidator<Option<TValue>>, TValueValidator>> validatorFactory)
			where TValueValidator : struct, IValueValidator<Option<TValue>[]>
			=> validatorFactory.Invoke(source).InvertTwo();

		public static DataSourceInvertedInverted<OptionalCollectionNullableDataContainerFactory<OptionalNullableCollectionStateValidator<TValue>, TSource, TValue>, Optional<Option<TValue>[]>, Option<TValue>[], ItemCountValidator<Option<TValue>>, TValueValidator> Not<TSource, TValue, TValueValidator>(this DataSourceInverted<OptionalCollectionNullableDataContainerFactory<OptionalNullableCollectionStateValidator<TValue>, TSource, TValue>, Optional<Option<TValue>[]>, Option<TValue>[], ItemCountValidator<Option<TValue>>> source, Func<DataSourceInverted<OptionalCollectionNullableDataContainerFactory<OptionalNullableCollectionStateValidator<TValue>, TSource, TValue>, Optional<Option<TValue>[]>, Option<TValue>[], ItemCountValidator<Option<TValue>>>, DataSourceInvertedStandard<OptionalCollectionNullableDataContainerFactory<OptionalNullableCollectionStateValidator<TValue>, TSource, TValue>, Optional<Option<TValue>[]>, Option<TValue>[], ItemCountValidator<Option<TValue>>, TValueValidator>> validatorFactory)
			where TValueValidator : struct, IValueValidator<Option<TValue>[]>
			=> validatorFactory.Invoke(source).InvertTwo();

		public static DataSourceStandardStandardStandard<OptionalCollectionNullableDataContainerFactory<OptionalNullableCollectionStateValidator<TValue>, TSource, TValue>, Optional<Option<TValue>[]>, Option<TValue>[], ItemCountValidator<Option<TValue>>, UniqueValidator<Option<TValue>>, CustomValidator<Option<TValue>[]>> Assert<TSource, TValue>(this DataSourceStandardStandard<OptionalCollectionNullableDataContainerFactory<OptionalNullableCollectionStateValidator<TValue>, TSource, TValue>, Optional<Option<TValue>[]>, Option<TValue>[], ItemCountValidator<Option<TValue>>, UniqueValidator<Option<TValue>>> source, string description, Func<Option<TValue>[], bool> validator)
			=> source.Add(new CustomValidator<Option<TValue>[]>(description, validator));

		public static DataSourceInvertedStandardStandard<OptionalCollectionNullableDataContainerFactory<OptionalNullableCollectionStateValidator<TValue>, TSource, TValue>, Optional<Option<TValue>[]>, Option<TValue>[], ItemCountValidator<Option<TValue>>, UniqueValidator<Option<TValue>>, CustomValidator<Option<TValue>[]>> Assert<TSource, TValue>(this DataSourceInvertedStandard<OptionalCollectionNullableDataContainerFactory<OptionalNullableCollectionStateValidator<TValue>, TSource, TValue>, Optional<Option<TValue>[]>, Option<TValue>[], ItemCountValidator<Option<TValue>>, UniqueValidator<Option<TValue>>> source, string description, Func<Option<TValue>[], bool> validator)
			=> source.Add(new CustomValidator<Option<TValue>[]>(description, validator));

		public static DataSourceStandardInvertedStandard<OptionalCollectionNullableDataContainerFactory<OptionalNullableCollectionStateValidator<TValue>, TSource, TValue>, Optional<Option<TValue>[]>, Option<TValue>[], ItemCountValidator<Option<TValue>>, UniqueValidator<Option<TValue>>, CustomValidator<Option<TValue>[]>> Assert<TSource, TValue>(this DataSourceStandardInverted<OptionalCollectionNullableDataContainerFactory<OptionalNullableCollectionStateValidator<TValue>, TSource, TValue>, Optional<Option<TValue>[]>, Option<TValue>[], ItemCountValidator<Option<TValue>>, UniqueValidator<Option<TValue>>> source, string description, Func<Option<TValue>[], bool> validator)
			=> source.Add(new CustomValidator<Option<TValue>[]>(description, validator));

		public static DataSourceInvertedInvertedStandard<OptionalCollectionNullableDataContainerFactory<OptionalNullableCollectionStateValidator<TValue>, TSource, TValue>, Optional<Option<TValue>[]>, Option<TValue>[], ItemCountValidator<Option<TValue>>, UniqueValidator<Option<TValue>>, CustomValidator<Option<TValue>[]>> Assert<TSource, TValue>(this DataSourceInvertedInverted<OptionalCollectionNullableDataContainerFactory<OptionalNullableCollectionStateValidator<TValue>, TSource, TValue>, Optional<Option<TValue>[]>, Option<TValue>[], ItemCountValidator<Option<TValue>>, UniqueValidator<Option<TValue>>> source, string description, Func<Option<TValue>[], bool> validator)
			=> source.Add(new CustomValidator<Option<TValue>[]>(description, validator));

		public static DataSourceStandardStandardInverted<OptionalCollectionNullableDataContainerFactory<OptionalNullableCollectionStateValidator<TValue>, TSource, TValue>, Optional<Option<TValue>[]>, Option<TValue>[], ItemCountValidator<Option<TValue>>, UniqueValidator<Option<TValue>>, TValueValidator> Not<TSource, TValue, TValueValidator>(this DataSourceStandardStandard<OptionalCollectionNullableDataContainerFactory<OptionalNullableCollectionStateValidator<TValue>, TSource, TValue>, Optional<Option<TValue>[]>, Option<TValue>[], ItemCountValidator<Option<TValue>>, UniqueValidator<Option<TValue>>> source, Func<DataSourceStandardStandard<OptionalCollectionNullableDataContainerFactory<OptionalNullableCollectionStateValidator<TValue>, TSource, TValue>, Optional<Option<TValue>[]>, Option<TValue>[], ItemCountValidator<Option<TValue>>, UniqueValidator<Option<TValue>>>, DataSourceStandardStandardStandard<OptionalCollectionNullableDataContainerFactory<OptionalNullableCollectionStateValidator<TValue>, TSource, TValue>, Optional<Option<TValue>[]>, Option<TValue>[], ItemCountValidator<Option<TValue>>, UniqueValidator<Option<TValue>>, TValueValidator>> validatorFactory)
			where TValueValidator : struct, IValueValidator<Option<TValue>[]>
			=> validatorFactory.Invoke(source).InvertThree();

		public static DataSourceInvertedStandardInverted<OptionalCollectionNullableDataContainerFactory<OptionalNullableCollectionStateValidator<TValue>, TSource, TValue>, Optional<Option<TValue>[]>, Option<TValue>[], ItemCountValidator<Option<TValue>>, UniqueValidator<Option<TValue>>, TValueValidator> Not<TSource, TValue, TValueValidator>(this DataSourceInvertedStandard<OptionalCollectionNullableDataContainerFactory<OptionalNullableCollectionStateValidator<TValue>, TSource, TValue>, Optional<Option<TValue>[]>, Option<TValue>[], ItemCountValidator<Option<TValue>>, UniqueValidator<Option<TValue>>> source, Func<DataSourceInvertedStandard<OptionalCollectionNullableDataContainerFactory<OptionalNullableCollectionStateValidator<TValue>, TSource, TValue>, Optional<Option<TValue>[]>, Option<TValue>[], ItemCountValidator<Option<TValue>>, UniqueValidator<Option<TValue>>>, DataSourceInvertedStandardStandard<OptionalCollectionNullableDataContainerFactory<OptionalNullableCollectionStateValidator<TValue>, TSource, TValue>, Optional<Option<TValue>[]>, Option<TValue>[], ItemCountValidator<Option<TValue>>, UniqueValidator<Option<TValue>>, TValueValidator>> validatorFactory)
			where TValueValidator : struct, IValueValidator<Option<TValue>[]>
			=> validatorFactory.Invoke(source).InvertThree();

		public static DataSourceStandardInvertedInverted<OptionalCollectionNullableDataContainerFactory<OptionalNullableCollectionStateValidator<TValue>, TSource, TValue>, Optional<Option<TValue>[]>, Option<TValue>[], ItemCountValidator<Option<TValue>>, UniqueValidator<Option<TValue>>, TValueValidator> Not<TSource, TValue, TValueValidator>(this DataSourceStandardInverted<OptionalCollectionNullableDataContainerFactory<OptionalNullableCollectionStateValidator<TValue>, TSource, TValue>, Optional<Option<TValue>[]>, Option<TValue>[], ItemCountValidator<Option<TValue>>, UniqueValidator<Option<TValue>>> source, Func<DataSourceStandardInverted<OptionalCollectionNullableDataContainerFactory<OptionalNullableCollectionStateValidator<TValue>, TSource, TValue>, Optional<Option<TValue>[]>, Option<TValue>[], ItemCountValidator<Option<TValue>>, UniqueValidator<Option<TValue>>>, DataSourceStandardInvertedStandard<OptionalCollectionNullableDataContainerFactory<OptionalNullableCollectionStateValidator<TValue>, TSource, TValue>, Optional<Option<TValue>[]>, Option<TValue>[], ItemCountValidator<Option<TValue>>, UniqueValidator<Option<TValue>>, TValueValidator>> validatorFactory)
			where TValueValidator : struct, IValueValidator<Option<TValue>[]>
			=> validatorFactory.Invoke(source).InvertThree();

		public static DataSourceInvertedInvertedInverted<OptionalCollectionNullableDataContainerFactory<OptionalNullableCollectionStateValidator<TValue>, TSource, TValue>, Optional<Option<TValue>[]>, Option<TValue>[], ItemCountValidator<Option<TValue>>, UniqueValidator<Option<TValue>>, TValueValidator> Not<TSource, TValue, TValueValidator>(this DataSourceInvertedInverted<OptionalCollectionNullableDataContainerFactory<OptionalNullableCollectionStateValidator<TValue>, TSource, TValue>, Optional<Option<TValue>[]>, Option<TValue>[], ItemCountValidator<Option<TValue>>, UniqueValidator<Option<TValue>>> source, Func<DataSourceInvertedInverted<OptionalCollectionNullableDataContainerFactory<OptionalNullableCollectionStateValidator<TValue>, TSource, TValue>, Optional<Option<TValue>[]>, Option<TValue>[], ItemCountValidator<Option<TValue>>, UniqueValidator<Option<TValue>>>, DataSourceInvertedInvertedStandard<OptionalCollectionNullableDataContainerFactory<OptionalNullableCollectionStateValidator<TValue>, TSource, TValue>, Optional<Option<TValue>[]>, Option<TValue>[], ItemCountValidator<Option<TValue>>, UniqueValidator<Option<TValue>>, TValueValidator>> validatorFactory)
			where TValueValidator : struct, IValueValidator<Option<TValue>[]>
			=> validatorFactory.Invoke(source).InvertThree();
	}
}