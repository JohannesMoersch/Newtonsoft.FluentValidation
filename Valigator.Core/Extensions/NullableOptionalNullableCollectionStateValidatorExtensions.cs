// NOTE: GENERATED FILE //
using Functional;
using System;
using System.Collections.Generic;
using Valigator.Core;
using Valigator.Core.DataContainers.Factories;
using Valigator.Core.DataSources;
using Valigator.Core.StateValidators;
using Valigator.Core.ValueValidators;

namespace Valigator
{
	public static class NullableOptionalNullableCollectionStateValidatorExtensions
	{
		public static DataSourceInverted<NullableCollectionNullableDataContainerFactory<NullableOptionalNullableCollectionStateValidator<TValue>, TValue, TValue>, Option<Option<TValue>[]>, Option<TValue>[], TValueValidator> Not<TValue, TValueValidator>(this NullableOptionalNullableCollectionStateValidator<TValue> source, Func<NullableOptionalNullableCollectionStateValidator<TValue>, DataSourceStandard<NullableCollectionNullableDataContainerFactory<NullableOptionalNullableCollectionStateValidator<TValue>, TValue, TValue>, Option<Option<TValue>[]>, Option<TValue>[], TValueValidator>> validatorFactory)
			where TValueValidator : struct, IValueValidator<Option<TValue>[]>
			=> validatorFactory.Invoke(source).InvertOne();

		public static DataSourceInverted<NullableCollectionNullableDataContainerFactory<NullableOptionalNullableCollectionStateValidator<TValue>, TSource, TValue>, Option<Option<TValue>[]>, Option<TValue>[], TValueValidator> Not<TSource, TValue, TValueValidator>(this DataSource<NullableCollectionNullableDataContainerFactory<NullableOptionalNullableCollectionStateValidator<TValue>, TSource, TValue>, Option<Option<TValue>[]>, Option<TValue>[]> source, Func<DataSource<NullableCollectionNullableDataContainerFactory<NullableOptionalNullableCollectionStateValidator<TValue>, TSource, TValue>, Option<Option<TValue>[]>, Option<TValue>[]>, DataSourceStandard<NullableCollectionNullableDataContainerFactory<NullableOptionalNullableCollectionStateValidator<TValue>, TSource, TValue>, Option<Option<TValue>[]>, Option<TValue>[], TValueValidator>> validatorFactory)
			where TValueValidator : struct, IValueValidator<Option<TValue>[]>
			=> validatorFactory.Invoke(source).InvertOne();

		public static DataSourceStandard<NullableCollectionNullableDataContainerFactory<NullableOptionalNullableCollectionStateValidator<TValue>, TValue, TValue>, Option<Option<TValue>[]>, Option<TValue>[], CustomValidator<Option<TValue>[]>> Assert<TValue>(this NullableOptionalNullableCollectionStateValidator<TValue> source, string description, Func<Option<TValue>[], bool> validator)
			=> source.Add(new CustomValidator<Option<TValue>[]>(description, validator));

		public static DataSourceStandard<NullableCollectionNullableDataContainerFactory<NullableOptionalNullableCollectionStateValidator<TValue>, TValue, TValue>, Option<Option<TValue>[]>, Option<TValue>[], CustomValidator<Option<TValue>[]>> Assert<TValue>(this DataSource<NullableCollectionNullableDataContainerFactory<NullableOptionalNullableCollectionStateValidator<TValue>, TValue, TValue>, Option<Option<TValue>[]>, Option<TValue>[]> source, string description, Func<Option<TValue>[], bool> validator)
			=> source.Add(new CustomValidator<Option<TValue>[]>(description, validator));

		public static DataSourceStandard<NullableCollectionNullableDataContainerFactory<NullableOptionalNullableCollectionStateValidator<TValue>, TValue, TValue>, Option<Option<TValue>[]>, Option<TValue>[], UniqueValidator<Option<TValue>>> Unique<TValue>(this NullableOptionalNullableCollectionStateValidator<TValue> source)
			=> source.Add(new UniqueValidator<Option<TValue>>());

		public static DataSourceStandard<NullableCollectionNullableDataContainerFactory<NullableOptionalNullableCollectionStateValidator<TValue>, TValue, TValue>, Option<Option<TValue>[]>, Option<TValue>[], UniqueValidator<Option<TValue>>> Unique<TValue>(this DataSource<NullableCollectionNullableDataContainerFactory<NullableOptionalNullableCollectionStateValidator<TValue>, TValue, TValue>, Option<Option<TValue>[]>, Option<TValue>[]> source)
			=> source.Add(new UniqueValidator<Option<TValue>>());

		public static DataSourceStandard<NullableCollectionNullableDataContainerFactory<NullableOptionalNullableCollectionStateValidator<TValue>, TValue, TValue>, Option<Option<TValue>[]>, Option<TValue>[], ItemCountValidator<Option<TValue>>> ItemCount<TValue>(this NullableOptionalNullableCollectionStateValidator<TValue> source, int? minimumItems = null, int? maximumItems = null)
			=> source.Add(new ItemCountValidator<Option<TValue>>(minimumItems, maximumItems));

		public static DataSourceStandard<NullableCollectionNullableDataContainerFactory<NullableOptionalNullableCollectionStateValidator<TValue>, TValue, TValue>, Option<Option<TValue>[]>, Option<TValue>[], ItemCountValidator<Option<TValue>>> ItemCount<TValue>(this DataSource<NullableCollectionNullableDataContainerFactory<NullableOptionalNullableCollectionStateValidator<TValue>, TValue, TValue>, Option<Option<TValue>[]>, Option<TValue>[]> source, int? minimumItems = null, int? maximumItems = null)
			=> source.Add(new ItemCountValidator<Option<TValue>>(minimumItems, maximumItems));

		public static DataSourceStandardStandard<NullableCollectionNullableDataContainerFactory<NullableOptionalNullableCollectionStateValidator<TValue>, TSource, TValue>, Option<Option<TValue>[]>, Option<TValue>[], UniqueValidator<Option<TValue>>, CustomValidator<Option<TValue>[]>> Assert<TSource, TValue>(this DataSourceStandard<NullableCollectionNullableDataContainerFactory<NullableOptionalNullableCollectionStateValidator<TValue>, TSource, TValue>, Option<Option<TValue>[]>, Option<TValue>[], UniqueValidator<Option<TValue>>> source, string description, Func<Option<TValue>[], bool> validator)
			=> source.Add(new CustomValidator<Option<TValue>[]>(description, validator));

		public static DataSourceInvertedStandard<NullableCollectionNullableDataContainerFactory<NullableOptionalNullableCollectionStateValidator<TValue>, TSource, TValue>, Option<Option<TValue>[]>, Option<TValue>[], UniqueValidator<Option<TValue>>, CustomValidator<Option<TValue>[]>> Assert<TSource, TValue>(this DataSourceInverted<NullableCollectionNullableDataContainerFactory<NullableOptionalNullableCollectionStateValidator<TValue>, TSource, TValue>, Option<Option<TValue>[]>, Option<TValue>[], UniqueValidator<Option<TValue>>> source, string description, Func<Option<TValue>[], bool> validator)
			=> source.Add(new CustomValidator<Option<TValue>[]>(description, validator));

		public static DataSourceStandardStandard<NullableCollectionNullableDataContainerFactory<NullableOptionalNullableCollectionStateValidator<TValue>, TSource, TValue>, Option<Option<TValue>[]>, Option<TValue>[], UniqueValidator<Option<TValue>>, ItemCountValidator<Option<TValue>>> ItemCount<TSource, TValue>(this DataSourceStandard<NullableCollectionNullableDataContainerFactory<NullableOptionalNullableCollectionStateValidator<TValue>, TSource, TValue>, Option<Option<TValue>[]>, Option<TValue>[], UniqueValidator<Option<TValue>>> source, int? minimumItems = null, int? maximumItems = null)
			=> source.Add(new ItemCountValidator<Option<TValue>>(minimumItems, maximumItems));

		public static DataSourceInvertedStandard<NullableCollectionNullableDataContainerFactory<NullableOptionalNullableCollectionStateValidator<TValue>, TSource, TValue>, Option<Option<TValue>[]>, Option<TValue>[], UniqueValidator<Option<TValue>>, ItemCountValidator<Option<TValue>>> ItemCount<TSource, TValue>(this DataSourceInverted<NullableCollectionNullableDataContainerFactory<NullableOptionalNullableCollectionStateValidator<TValue>, TSource, TValue>, Option<Option<TValue>[]>, Option<TValue>[], UniqueValidator<Option<TValue>>> source, int? minimumItems = null, int? maximumItems = null)
			=> source.Add(new ItemCountValidator<Option<TValue>>(minimumItems, maximumItems));

		public static DataSourceStandardInverted<NullableCollectionNullableDataContainerFactory<NullableOptionalNullableCollectionStateValidator<TValue>, TSource, TValue>, Option<Option<TValue>[]>, Option<TValue>[], UniqueValidator<Option<TValue>>, TValueValidator> Not<TSource, TValue, TValueValidator>(this DataSourceStandard<NullableCollectionNullableDataContainerFactory<NullableOptionalNullableCollectionStateValidator<TValue>, TSource, TValue>, Option<Option<TValue>[]>, Option<TValue>[], UniqueValidator<Option<TValue>>> source, Func<DataSourceStandard<NullableCollectionNullableDataContainerFactory<NullableOptionalNullableCollectionStateValidator<TValue>, TSource, TValue>, Option<Option<TValue>[]>, Option<TValue>[], UniqueValidator<Option<TValue>>>, DataSourceStandardStandard<NullableCollectionNullableDataContainerFactory<NullableOptionalNullableCollectionStateValidator<TValue>, TSource, TValue>, Option<Option<TValue>[]>, Option<TValue>[], UniqueValidator<Option<TValue>>, TValueValidator>> validatorFactory)
			where TValueValidator : struct, IValueValidator<Option<TValue>[]>
			=> validatorFactory.Invoke(source).InvertTwo();

		public static DataSourceInvertedInverted<NullableCollectionNullableDataContainerFactory<NullableOptionalNullableCollectionStateValidator<TValue>, TSource, TValue>, Option<Option<TValue>[]>, Option<TValue>[], UniqueValidator<Option<TValue>>, TValueValidator> Not<TSource, TValue, TValueValidator>(this DataSourceInverted<NullableCollectionNullableDataContainerFactory<NullableOptionalNullableCollectionStateValidator<TValue>, TSource, TValue>, Option<Option<TValue>[]>, Option<TValue>[], UniqueValidator<Option<TValue>>> source, Func<DataSourceInverted<NullableCollectionNullableDataContainerFactory<NullableOptionalNullableCollectionStateValidator<TValue>, TSource, TValue>, Option<Option<TValue>[]>, Option<TValue>[], UniqueValidator<Option<TValue>>>, DataSourceInvertedStandard<NullableCollectionNullableDataContainerFactory<NullableOptionalNullableCollectionStateValidator<TValue>, TSource, TValue>, Option<Option<TValue>[]>, Option<TValue>[], UniqueValidator<Option<TValue>>, TValueValidator>> validatorFactory)
			where TValueValidator : struct, IValueValidator<Option<TValue>[]>
			=> validatorFactory.Invoke(source).InvertTwo();

		public static DataSourceStandardStandardStandard<NullableCollectionNullableDataContainerFactory<NullableOptionalNullableCollectionStateValidator<TValue>, TSource, TValue>, Option<Option<TValue>[]>, Option<TValue>[], UniqueValidator<Option<TValue>>, ItemCountValidator<Option<TValue>>, CustomValidator<Option<TValue>[]>> Assert<TSource, TValue>(this DataSourceStandardStandard<NullableCollectionNullableDataContainerFactory<NullableOptionalNullableCollectionStateValidator<TValue>, TSource, TValue>, Option<Option<TValue>[]>, Option<TValue>[], UniqueValidator<Option<TValue>>, ItemCountValidator<Option<TValue>>> source, string description, Func<Option<TValue>[], bool> validator)
			=> source.Add(new CustomValidator<Option<TValue>[]>(description, validator));

		public static DataSourceInvertedStandardStandard<NullableCollectionNullableDataContainerFactory<NullableOptionalNullableCollectionStateValidator<TValue>, TSource, TValue>, Option<Option<TValue>[]>, Option<TValue>[], UniqueValidator<Option<TValue>>, ItemCountValidator<Option<TValue>>, CustomValidator<Option<TValue>[]>> Assert<TSource, TValue>(this DataSourceInvertedStandard<NullableCollectionNullableDataContainerFactory<NullableOptionalNullableCollectionStateValidator<TValue>, TSource, TValue>, Option<Option<TValue>[]>, Option<TValue>[], UniqueValidator<Option<TValue>>, ItemCountValidator<Option<TValue>>> source, string description, Func<Option<TValue>[], bool> validator)
			=> source.Add(new CustomValidator<Option<TValue>[]>(description, validator));

		public static DataSourceStandardInvertedStandard<NullableCollectionNullableDataContainerFactory<NullableOptionalNullableCollectionStateValidator<TValue>, TSource, TValue>, Option<Option<TValue>[]>, Option<TValue>[], UniqueValidator<Option<TValue>>, ItemCountValidator<Option<TValue>>, CustomValidator<Option<TValue>[]>> Assert<TSource, TValue>(this DataSourceStandardInverted<NullableCollectionNullableDataContainerFactory<NullableOptionalNullableCollectionStateValidator<TValue>, TSource, TValue>, Option<Option<TValue>[]>, Option<TValue>[], UniqueValidator<Option<TValue>>, ItemCountValidator<Option<TValue>>> source, string description, Func<Option<TValue>[], bool> validator)
			=> source.Add(new CustomValidator<Option<TValue>[]>(description, validator));

		public static DataSourceInvertedInvertedStandard<NullableCollectionNullableDataContainerFactory<NullableOptionalNullableCollectionStateValidator<TValue>, TSource, TValue>, Option<Option<TValue>[]>, Option<TValue>[], UniqueValidator<Option<TValue>>, ItemCountValidator<Option<TValue>>, CustomValidator<Option<TValue>[]>> Assert<TSource, TValue>(this DataSourceInvertedInverted<NullableCollectionNullableDataContainerFactory<NullableOptionalNullableCollectionStateValidator<TValue>, TSource, TValue>, Option<Option<TValue>[]>, Option<TValue>[], UniqueValidator<Option<TValue>>, ItemCountValidator<Option<TValue>>> source, string description, Func<Option<TValue>[], bool> validator)
			=> source.Add(new CustomValidator<Option<TValue>[]>(description, validator));

		public static DataSourceStandardStandardInverted<NullableCollectionNullableDataContainerFactory<NullableOptionalNullableCollectionStateValidator<TValue>, TSource, TValue>, Option<Option<TValue>[]>, Option<TValue>[], UniqueValidator<Option<TValue>>, ItemCountValidator<Option<TValue>>, TValueValidator> Not<TSource, TValue, TValueValidator>(this DataSourceStandardStandard<NullableCollectionNullableDataContainerFactory<NullableOptionalNullableCollectionStateValidator<TValue>, TSource, TValue>, Option<Option<TValue>[]>, Option<TValue>[], UniqueValidator<Option<TValue>>, ItemCountValidator<Option<TValue>>> source, Func<DataSourceStandardStandard<NullableCollectionNullableDataContainerFactory<NullableOptionalNullableCollectionStateValidator<TValue>, TSource, TValue>, Option<Option<TValue>[]>, Option<TValue>[], UniqueValidator<Option<TValue>>, ItemCountValidator<Option<TValue>>>, DataSourceStandardStandardStandard<NullableCollectionNullableDataContainerFactory<NullableOptionalNullableCollectionStateValidator<TValue>, TSource, TValue>, Option<Option<TValue>[]>, Option<TValue>[], UniqueValidator<Option<TValue>>, ItemCountValidator<Option<TValue>>, TValueValidator>> validatorFactory)
			where TValueValidator : struct, IValueValidator<Option<TValue>[]>
			=> validatorFactory.Invoke(source).InvertThree();

		public static DataSourceInvertedStandardInverted<NullableCollectionNullableDataContainerFactory<NullableOptionalNullableCollectionStateValidator<TValue>, TSource, TValue>, Option<Option<TValue>[]>, Option<TValue>[], UniqueValidator<Option<TValue>>, ItemCountValidator<Option<TValue>>, TValueValidator> Not<TSource, TValue, TValueValidator>(this DataSourceInvertedStandard<NullableCollectionNullableDataContainerFactory<NullableOptionalNullableCollectionStateValidator<TValue>, TSource, TValue>, Option<Option<TValue>[]>, Option<TValue>[], UniqueValidator<Option<TValue>>, ItemCountValidator<Option<TValue>>> source, Func<DataSourceInvertedStandard<NullableCollectionNullableDataContainerFactory<NullableOptionalNullableCollectionStateValidator<TValue>, TSource, TValue>, Option<Option<TValue>[]>, Option<TValue>[], UniqueValidator<Option<TValue>>, ItemCountValidator<Option<TValue>>>, DataSourceInvertedStandardStandard<NullableCollectionNullableDataContainerFactory<NullableOptionalNullableCollectionStateValidator<TValue>, TSource, TValue>, Option<Option<TValue>[]>, Option<TValue>[], UniqueValidator<Option<TValue>>, ItemCountValidator<Option<TValue>>, TValueValidator>> validatorFactory)
			where TValueValidator : struct, IValueValidator<Option<TValue>[]>
			=> validatorFactory.Invoke(source).InvertThree();

		public static DataSourceStandardInvertedInverted<NullableCollectionNullableDataContainerFactory<NullableOptionalNullableCollectionStateValidator<TValue>, TSource, TValue>, Option<Option<TValue>[]>, Option<TValue>[], UniqueValidator<Option<TValue>>, ItemCountValidator<Option<TValue>>, TValueValidator> Not<TSource, TValue, TValueValidator>(this DataSourceStandardInverted<NullableCollectionNullableDataContainerFactory<NullableOptionalNullableCollectionStateValidator<TValue>, TSource, TValue>, Option<Option<TValue>[]>, Option<TValue>[], UniqueValidator<Option<TValue>>, ItemCountValidator<Option<TValue>>> source, Func<DataSourceStandardInverted<NullableCollectionNullableDataContainerFactory<NullableOptionalNullableCollectionStateValidator<TValue>, TSource, TValue>, Option<Option<TValue>[]>, Option<TValue>[], UniqueValidator<Option<TValue>>, ItemCountValidator<Option<TValue>>>, DataSourceStandardInvertedStandard<NullableCollectionNullableDataContainerFactory<NullableOptionalNullableCollectionStateValidator<TValue>, TSource, TValue>, Option<Option<TValue>[]>, Option<TValue>[], UniqueValidator<Option<TValue>>, ItemCountValidator<Option<TValue>>, TValueValidator>> validatorFactory)
			where TValueValidator : struct, IValueValidator<Option<TValue>[]>
			=> validatorFactory.Invoke(source).InvertThree();

		public static DataSourceInvertedInvertedInverted<NullableCollectionNullableDataContainerFactory<NullableOptionalNullableCollectionStateValidator<TValue>, TSource, TValue>, Option<Option<TValue>[]>, Option<TValue>[], UniqueValidator<Option<TValue>>, ItemCountValidator<Option<TValue>>, TValueValidator> Not<TSource, TValue, TValueValidator>(this DataSourceInvertedInverted<NullableCollectionNullableDataContainerFactory<NullableOptionalNullableCollectionStateValidator<TValue>, TSource, TValue>, Option<Option<TValue>[]>, Option<TValue>[], UniqueValidator<Option<TValue>>, ItemCountValidator<Option<TValue>>> source, Func<DataSourceInvertedInverted<NullableCollectionNullableDataContainerFactory<NullableOptionalNullableCollectionStateValidator<TValue>, TSource, TValue>, Option<Option<TValue>[]>, Option<TValue>[], UniqueValidator<Option<TValue>>, ItemCountValidator<Option<TValue>>>, DataSourceInvertedInvertedStandard<NullableCollectionNullableDataContainerFactory<NullableOptionalNullableCollectionStateValidator<TValue>, TSource, TValue>, Option<Option<TValue>[]>, Option<TValue>[], UniqueValidator<Option<TValue>>, ItemCountValidator<Option<TValue>>, TValueValidator>> validatorFactory)
			where TValueValidator : struct, IValueValidator<Option<TValue>[]>
			=> validatorFactory.Invoke(source).InvertThree();

		public static DataSourceStandardStandard<NullableCollectionNullableDataContainerFactory<NullableOptionalNullableCollectionStateValidator<TValue>, TSource, TValue>, Option<Option<TValue>[]>, Option<TValue>[], ItemCountValidator<Option<TValue>>, CustomValidator<Option<TValue>[]>> Assert<TSource, TValue>(this DataSourceStandard<NullableCollectionNullableDataContainerFactory<NullableOptionalNullableCollectionStateValidator<TValue>, TSource, TValue>, Option<Option<TValue>[]>, Option<TValue>[], ItemCountValidator<Option<TValue>>> source, string description, Func<Option<TValue>[], bool> validator)
			=> source.Add(new CustomValidator<Option<TValue>[]>(description, validator));

		public static DataSourceInvertedStandard<NullableCollectionNullableDataContainerFactory<NullableOptionalNullableCollectionStateValidator<TValue>, TSource, TValue>, Option<Option<TValue>[]>, Option<TValue>[], ItemCountValidator<Option<TValue>>, CustomValidator<Option<TValue>[]>> Assert<TSource, TValue>(this DataSourceInverted<NullableCollectionNullableDataContainerFactory<NullableOptionalNullableCollectionStateValidator<TValue>, TSource, TValue>, Option<Option<TValue>[]>, Option<TValue>[], ItemCountValidator<Option<TValue>>> source, string description, Func<Option<TValue>[], bool> validator)
			=> source.Add(new CustomValidator<Option<TValue>[]>(description, validator));

		public static DataSourceStandardStandard<NullableCollectionNullableDataContainerFactory<NullableOptionalNullableCollectionStateValidator<TValue>, TSource, TValue>, Option<Option<TValue>[]>, Option<TValue>[], ItemCountValidator<Option<TValue>>, UniqueValidator<Option<TValue>>> Unique<TSource, TValue>(this DataSourceStandard<NullableCollectionNullableDataContainerFactory<NullableOptionalNullableCollectionStateValidator<TValue>, TSource, TValue>, Option<Option<TValue>[]>, Option<TValue>[], ItemCountValidator<Option<TValue>>> source)
			=> source.Add(new UniqueValidator<Option<TValue>>());

		public static DataSourceInvertedStandard<NullableCollectionNullableDataContainerFactory<NullableOptionalNullableCollectionStateValidator<TValue>, TSource, TValue>, Option<Option<TValue>[]>, Option<TValue>[], ItemCountValidator<Option<TValue>>, UniqueValidator<Option<TValue>>> Unique<TSource, TValue>(this DataSourceInverted<NullableCollectionNullableDataContainerFactory<NullableOptionalNullableCollectionStateValidator<TValue>, TSource, TValue>, Option<Option<TValue>[]>, Option<TValue>[], ItemCountValidator<Option<TValue>>> source)
			=> source.Add(new UniqueValidator<Option<TValue>>());

		public static DataSourceStandardInverted<NullableCollectionNullableDataContainerFactory<NullableOptionalNullableCollectionStateValidator<TValue>, TSource, TValue>, Option<Option<TValue>[]>, Option<TValue>[], ItemCountValidator<Option<TValue>>, TValueValidator> Not<TSource, TValue, TValueValidator>(this DataSourceStandard<NullableCollectionNullableDataContainerFactory<NullableOptionalNullableCollectionStateValidator<TValue>, TSource, TValue>, Option<Option<TValue>[]>, Option<TValue>[], ItemCountValidator<Option<TValue>>> source, Func<DataSourceStandard<NullableCollectionNullableDataContainerFactory<NullableOptionalNullableCollectionStateValidator<TValue>, TSource, TValue>, Option<Option<TValue>[]>, Option<TValue>[], ItemCountValidator<Option<TValue>>>, DataSourceStandardStandard<NullableCollectionNullableDataContainerFactory<NullableOptionalNullableCollectionStateValidator<TValue>, TSource, TValue>, Option<Option<TValue>[]>, Option<TValue>[], ItemCountValidator<Option<TValue>>, TValueValidator>> validatorFactory)
			where TValueValidator : struct, IValueValidator<Option<TValue>[]>
			=> validatorFactory.Invoke(source).InvertTwo();

		public static DataSourceInvertedInverted<NullableCollectionNullableDataContainerFactory<NullableOptionalNullableCollectionStateValidator<TValue>, TSource, TValue>, Option<Option<TValue>[]>, Option<TValue>[], ItemCountValidator<Option<TValue>>, TValueValidator> Not<TSource, TValue, TValueValidator>(this DataSourceInverted<NullableCollectionNullableDataContainerFactory<NullableOptionalNullableCollectionStateValidator<TValue>, TSource, TValue>, Option<Option<TValue>[]>, Option<TValue>[], ItemCountValidator<Option<TValue>>> source, Func<DataSourceInverted<NullableCollectionNullableDataContainerFactory<NullableOptionalNullableCollectionStateValidator<TValue>, TSource, TValue>, Option<Option<TValue>[]>, Option<TValue>[], ItemCountValidator<Option<TValue>>>, DataSourceInvertedStandard<NullableCollectionNullableDataContainerFactory<NullableOptionalNullableCollectionStateValidator<TValue>, TSource, TValue>, Option<Option<TValue>[]>, Option<TValue>[], ItemCountValidator<Option<TValue>>, TValueValidator>> validatorFactory)
			where TValueValidator : struct, IValueValidator<Option<TValue>[]>
			=> validatorFactory.Invoke(source).InvertTwo();

		public static DataSourceStandardStandardStandard<NullableCollectionNullableDataContainerFactory<NullableOptionalNullableCollectionStateValidator<TValue>, TSource, TValue>, Option<Option<TValue>[]>, Option<TValue>[], ItemCountValidator<Option<TValue>>, UniqueValidator<Option<TValue>>, CustomValidator<Option<TValue>[]>> Assert<TSource, TValue>(this DataSourceStandardStandard<NullableCollectionNullableDataContainerFactory<NullableOptionalNullableCollectionStateValidator<TValue>, TSource, TValue>, Option<Option<TValue>[]>, Option<TValue>[], ItemCountValidator<Option<TValue>>, UniqueValidator<Option<TValue>>> source, string description, Func<Option<TValue>[], bool> validator)
			=> source.Add(new CustomValidator<Option<TValue>[]>(description, validator));

		public static DataSourceInvertedStandardStandard<NullableCollectionNullableDataContainerFactory<NullableOptionalNullableCollectionStateValidator<TValue>, TSource, TValue>, Option<Option<TValue>[]>, Option<TValue>[], ItemCountValidator<Option<TValue>>, UniqueValidator<Option<TValue>>, CustomValidator<Option<TValue>[]>> Assert<TSource, TValue>(this DataSourceInvertedStandard<NullableCollectionNullableDataContainerFactory<NullableOptionalNullableCollectionStateValidator<TValue>, TSource, TValue>, Option<Option<TValue>[]>, Option<TValue>[], ItemCountValidator<Option<TValue>>, UniqueValidator<Option<TValue>>> source, string description, Func<Option<TValue>[], bool> validator)
			=> source.Add(new CustomValidator<Option<TValue>[]>(description, validator));

		public static DataSourceStandardInvertedStandard<NullableCollectionNullableDataContainerFactory<NullableOptionalNullableCollectionStateValidator<TValue>, TSource, TValue>, Option<Option<TValue>[]>, Option<TValue>[], ItemCountValidator<Option<TValue>>, UniqueValidator<Option<TValue>>, CustomValidator<Option<TValue>[]>> Assert<TSource, TValue>(this DataSourceStandardInverted<NullableCollectionNullableDataContainerFactory<NullableOptionalNullableCollectionStateValidator<TValue>, TSource, TValue>, Option<Option<TValue>[]>, Option<TValue>[], ItemCountValidator<Option<TValue>>, UniqueValidator<Option<TValue>>> source, string description, Func<Option<TValue>[], bool> validator)
			=> source.Add(new CustomValidator<Option<TValue>[]>(description, validator));

		public static DataSourceInvertedInvertedStandard<NullableCollectionNullableDataContainerFactory<NullableOptionalNullableCollectionStateValidator<TValue>, TSource, TValue>, Option<Option<TValue>[]>, Option<TValue>[], ItemCountValidator<Option<TValue>>, UniqueValidator<Option<TValue>>, CustomValidator<Option<TValue>[]>> Assert<TSource, TValue>(this DataSourceInvertedInverted<NullableCollectionNullableDataContainerFactory<NullableOptionalNullableCollectionStateValidator<TValue>, TSource, TValue>, Option<Option<TValue>[]>, Option<TValue>[], ItemCountValidator<Option<TValue>>, UniqueValidator<Option<TValue>>> source, string description, Func<Option<TValue>[], bool> validator)
			=> source.Add(new CustomValidator<Option<TValue>[]>(description, validator));

		public static DataSourceStandardStandardInverted<NullableCollectionNullableDataContainerFactory<NullableOptionalNullableCollectionStateValidator<TValue>, TSource, TValue>, Option<Option<TValue>[]>, Option<TValue>[], ItemCountValidator<Option<TValue>>, UniqueValidator<Option<TValue>>, TValueValidator> Not<TSource, TValue, TValueValidator>(this DataSourceStandardStandard<NullableCollectionNullableDataContainerFactory<NullableOptionalNullableCollectionStateValidator<TValue>, TSource, TValue>, Option<Option<TValue>[]>, Option<TValue>[], ItemCountValidator<Option<TValue>>, UniqueValidator<Option<TValue>>> source, Func<DataSourceStandardStandard<NullableCollectionNullableDataContainerFactory<NullableOptionalNullableCollectionStateValidator<TValue>, TSource, TValue>, Option<Option<TValue>[]>, Option<TValue>[], ItemCountValidator<Option<TValue>>, UniqueValidator<Option<TValue>>>, DataSourceStandardStandardStandard<NullableCollectionNullableDataContainerFactory<NullableOptionalNullableCollectionStateValidator<TValue>, TSource, TValue>, Option<Option<TValue>[]>, Option<TValue>[], ItemCountValidator<Option<TValue>>, UniqueValidator<Option<TValue>>, TValueValidator>> validatorFactory)
			where TValueValidator : struct, IValueValidator<Option<TValue>[]>
			=> validatorFactory.Invoke(source).InvertThree();

		public static DataSourceInvertedStandardInverted<NullableCollectionNullableDataContainerFactory<NullableOptionalNullableCollectionStateValidator<TValue>, TSource, TValue>, Option<Option<TValue>[]>, Option<TValue>[], ItemCountValidator<Option<TValue>>, UniqueValidator<Option<TValue>>, TValueValidator> Not<TSource, TValue, TValueValidator>(this DataSourceInvertedStandard<NullableCollectionNullableDataContainerFactory<NullableOptionalNullableCollectionStateValidator<TValue>, TSource, TValue>, Option<Option<TValue>[]>, Option<TValue>[], ItemCountValidator<Option<TValue>>, UniqueValidator<Option<TValue>>> source, Func<DataSourceInvertedStandard<NullableCollectionNullableDataContainerFactory<NullableOptionalNullableCollectionStateValidator<TValue>, TSource, TValue>, Option<Option<TValue>[]>, Option<TValue>[], ItemCountValidator<Option<TValue>>, UniqueValidator<Option<TValue>>>, DataSourceInvertedStandardStandard<NullableCollectionNullableDataContainerFactory<NullableOptionalNullableCollectionStateValidator<TValue>, TSource, TValue>, Option<Option<TValue>[]>, Option<TValue>[], ItemCountValidator<Option<TValue>>, UniqueValidator<Option<TValue>>, TValueValidator>> validatorFactory)
			where TValueValidator : struct, IValueValidator<Option<TValue>[]>
			=> validatorFactory.Invoke(source).InvertThree();

		public static DataSourceStandardInvertedInverted<NullableCollectionNullableDataContainerFactory<NullableOptionalNullableCollectionStateValidator<TValue>, TSource, TValue>, Option<Option<TValue>[]>, Option<TValue>[], ItemCountValidator<Option<TValue>>, UniqueValidator<Option<TValue>>, TValueValidator> Not<TSource, TValue, TValueValidator>(this DataSourceStandardInverted<NullableCollectionNullableDataContainerFactory<NullableOptionalNullableCollectionStateValidator<TValue>, TSource, TValue>, Option<Option<TValue>[]>, Option<TValue>[], ItemCountValidator<Option<TValue>>, UniqueValidator<Option<TValue>>> source, Func<DataSourceStandardInverted<NullableCollectionNullableDataContainerFactory<NullableOptionalNullableCollectionStateValidator<TValue>, TSource, TValue>, Option<Option<TValue>[]>, Option<TValue>[], ItemCountValidator<Option<TValue>>, UniqueValidator<Option<TValue>>>, DataSourceStandardInvertedStandard<NullableCollectionNullableDataContainerFactory<NullableOptionalNullableCollectionStateValidator<TValue>, TSource, TValue>, Option<Option<TValue>[]>, Option<TValue>[], ItemCountValidator<Option<TValue>>, UniqueValidator<Option<TValue>>, TValueValidator>> validatorFactory)
			where TValueValidator : struct, IValueValidator<Option<TValue>[]>
			=> validatorFactory.Invoke(source).InvertThree();

		public static DataSourceInvertedInvertedInverted<NullableCollectionNullableDataContainerFactory<NullableOptionalNullableCollectionStateValidator<TValue>, TSource, TValue>, Option<Option<TValue>[]>, Option<TValue>[], ItemCountValidator<Option<TValue>>, UniqueValidator<Option<TValue>>, TValueValidator> Not<TSource, TValue, TValueValidator>(this DataSourceInvertedInverted<NullableCollectionNullableDataContainerFactory<NullableOptionalNullableCollectionStateValidator<TValue>, TSource, TValue>, Option<Option<TValue>[]>, Option<TValue>[], ItemCountValidator<Option<TValue>>, UniqueValidator<Option<TValue>>> source, Func<DataSourceInvertedInverted<NullableCollectionNullableDataContainerFactory<NullableOptionalNullableCollectionStateValidator<TValue>, TSource, TValue>, Option<Option<TValue>[]>, Option<TValue>[], ItemCountValidator<Option<TValue>>, UniqueValidator<Option<TValue>>>, DataSourceInvertedInvertedStandard<NullableCollectionNullableDataContainerFactory<NullableOptionalNullableCollectionStateValidator<TValue>, TSource, TValue>, Option<Option<TValue>[]>, Option<TValue>[], ItemCountValidator<Option<TValue>>, UniqueValidator<Option<TValue>>, TValueValidator>> validatorFactory)
			where TValueValidator : struct, IValueValidator<Option<TValue>[]>
			=> validatorFactory.Invoke(source).InvertThree();
	}
}